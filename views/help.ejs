<% this.title = 'Help' %>
<% include header %>
<div class="padding">
    <h1 class="ui center aligned header">Help</h1>
    <div style="font-content">
        <h2 class="ui header">Judge</h2>
        <p>
            Judge server is on <code>Ubuntu 16.04 64bit</code>.
            <br>Please notice the different between <code>windows</code> and <code>linux</code>.
        </p>
        <p>
            C++ code is compiled by <code>g++</code> , command is &nbsp;<code>g++ source_file.cpp -o exec_file -O2 -lm -DONLINE_JUDGE</code>.
            <br> C code is compiled by <code>gcc</code> , command is &nbsp;<code>gcc source_file.c -o exec_file -O2 -lm -DONLINE_JUDGE</code>.
            <br> Java code is compiled by <code>gcj</code>.
            <br>
        </p>
        <p>Please choose <strong>standard IO</strong> or <strong>File IO</strong>.</p>

        <h2 class="ui header">Personal Information<br></h2>
        <p>Please use <a href="https://cn.gravatar.com/">Gravatar</a> for avatar display.</p>
        <h2 class="ui header">Add a problem</h2>
        <h3 class="ui header">Problem content</h3>
        <div>
            <p>Click <a href="/problem/0/edit">Add a problem</a>, and write the content.You can use TEX commands like $TEX$.</p>
            <h3 class="ui header">Testdata</h3>
            <p>Click "manage" button when you are visiting a problem.You can adjust time and memory limit.Data package is a <code>zip</code> file like this:</p>
            <div class="ui existing segment" style="border-radius: 0.285714rem; font-size: 14px;"><pre style="margin-top: 0px; margin-bottom: 0px;"><code>xxx.zip
<span class="hljs-string">|</span>
<span class="hljs-string">|--data_rule.txt</span>
<span class="hljs-string">|--input1.in</span>
<span class="hljs-string">|--output1.out</span>
<span class="hljs-string">|--input2.in</span>
<span class="hljs-string">|--output2.out</span>
<span class="hljs-string">|--......</span>
</code></pre>
            </div>
            <p>And the&nbsp;<code>data_rule.txt</code>&nbsp;has the following format:</p>
            <div class="ui existing segment" style="border-radius: 0.285714rem; font-size: 14px;"><pre style="margin-top: 0px; margin-bottom: 0px;"><code>1 2 3 4 5 6 7 8 9 10
input#.in
output#.out
</code></pre>
            </div>
            <ul>
                <li>The 1st line means all the testcases, separated with spaces</li>
                <li>The 2nd line means the filename of the input file, and&nbsp;<code>#</code>&nbsp;will be replaced by the testcase number in line 1.</li>
                <li>The 3rd line means the filename of the output file, and&nbsp;<code>#</code>&nbsp;will be replaced by the testcase number in line 1.</li>
            </ul>
            <p>If you want to have <strong>subtasks</strong>, you'll need the format below:</p>
            <div class="ui existing segment" style="border-radius: 0.285714rem; font-size: 14px;"><pre style="margin-top: 0px; margin-bottom: 0px;"><code>sum:30  1 2 3
min:20  4 5 6
mul:50  7 8 9 10

input#.in
output#.out
</code></pre></div>
            Blank lines in the file will be ignored.Each line of the first few lines describes a sub-task.The format is like <code>WAY:SCORE CASE0 CASE1...</code> and the WAY is one of below:
            <ul>
                <li><code>sum</code>: the total score will be the average value of all the subtasks.</li>
                <li><code>mul</code>: the total score will be the product of all the subtasks.</li>
                <li><code>min</code>: the total score will be the mininum value of all the subtasks.</li>
            </ul>
            <p>Notice: <span>All the sub-folders in the <code>zip</code> package will be ignored.</span>
            </p>
            <p>If there is no <code>data_rule.txt</code>, the judge system will match <code>x.in</code> with <code>x.out/ans</code> .</p>
            <p>If the testdata is for a submit-answer problem then add a line describes the user's file, like this:</p>
            <div class="ui existing segment" style="border-radius: 0.285714rem; font-size: 14px;"><pre style="margin-top: 0px; margin-bottom: 0px;"><code>sum:30  1 2 3
min:20  4 5 6
mul:50  7 8 9 10

input#.in
output#.out
submit#.out
</code></pre></div>
            <h3 class="ui header">Special Judge</h3>
            <p>If you need Special Judge, please add a <code>spj_LANG.xxx</code> file.<code>LANG</code> is the language of the spj program, which can be <code>c</code>, <code>cpp</code>, <code>cpp11</code>, <code>java</code> and <code>nodejs</code>.</p>
            <p>When Special Judge Program is running, there will be four files in the working directory: <code>input(input file)</code>, <code>user_out(user output file)</code>, <code>answer(standard output file)</code>, <code>code(source file, NO IN SUBMIT-ANSWER PROBLEMS)</code>.</p>
            <p>Special Judge should output a score to <code>stdout</code> , between 0 and 100. System will turn it into real score automaticlly. The prompt text should be output to <code>stderr</code>.</p>
            <h2 class="ui header">Markdown</h2>
            <p>If there are <i class="mega-octicon octicon-markdown"></i> icon, you can use Markdown.</p>
        </div>
    </div>
</div>
<% include footer %>